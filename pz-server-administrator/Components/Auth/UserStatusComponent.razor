@using pz_server_administrator.Models
@using pz_server_administrator.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@implements IDisposable
@rendermode @(new InteractiveServerRenderMode())

<FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right" VerticalAlignment="VerticalAlignment.Center">
    @if (AuthService.CurrentState.IsAuthenticated)
    {
        <FluentPersona Name="@AuthService.CurrentState.CurrentUser?.Username"
                      SecondaryText="@GetRoleDisplayName(AuthService.CurrentState.CurrentRole)"
                      Size="PersonaSize.Size32"
                      ImageInitials="@GetUserInitials(AuthService.CurrentState.CurrentUser?.Username)" />
        
        <FluentButton Id="user-menu-button"
                     IconStart="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Person())"
                     Appearance="Appearance.Stealth"
                     OnClick="ToggleUserMenu">
            @AuthService.CurrentState.CurrentUser?.Username
        </FluentButton>
        
        <FluentPopover AnchorId="user-menu-button" @bind-Open="_isUserMenuOpen">
            <Body>
                <FluentStack Orientation="Orientation.Vertical" VerticalGap="5">
                    <FluentButton Appearance="Appearance.Stealth" OnClick="ShowUserInfo" Style="width: 100%; justify-content: flex-start;">
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Info())" Slot="start" />
                        Información del Usuario
                    </FluentButton>
                    
                    <FluentButton Appearance="Appearance.Stealth" OnClick="HandleLogout" Style="width: 100%; justify-content: flex-start;">
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.ArrowExit())" Slot="start" />
                        Cerrar Sesión
                    </FluentButton>
                </FluentStack>
            </Body>
        </FluentPopover>
    }
    else
    {
        <FluentButton Appearance="Appearance.Accent"
                     IconStart="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.LockClosed())"
                     OnClick="NavigateToLogin">
            Iniciar Sesión
        </FluentButton>
    }
</FluentStack>



<!-- User Info Dialog -->
<FluentDialog @bind-Hidden="@IsUserInfoHidden" Modal="true">
    <FluentDialogHeader>
        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Person())" />
        <FluentLabel Typo="Typography.PaneHeader">Información del Usuario</FluentLabel>
    </FluentDialogHeader>
    
    <FluentDialogBody>
        @if (AuthService.CurrentState.IsAuthenticated && AuthService.CurrentState.CurrentUser != null)
        {
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
                <FluentCard>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="8">
                        <FluentLabel Typo="Typography.Body"><strong>Usuario:</strong> @AuthService.CurrentState.CurrentUser.Username</FluentLabel>
                        <FluentLabel Typo="Typography.Body"><strong>Rol:</strong> @GetRoleDisplayName(AuthService.CurrentState.CurrentRole)</FluentLabel>
                        <FluentLabel Typo="Typography.Body"><strong>Estado:</strong> @(AuthService.CurrentState.CurrentUser.IsActive ? "Activo" : "Inactivo")</FluentLabel>
                        <FluentLabel Typo="Typography.Body"><strong>Creado:</strong> @AuthService.CurrentState.CurrentUser.CreatedAt.ToString("dd/MM/yyyy HH:mm")</FluentLabel>
                        @if (AuthService.CurrentState.CurrentUser.LastLoginAt.HasValue)
                        {
                            <FluentLabel Typo="Typography.Body"><strong>Último acceso:</strong> @AuthService.CurrentState.CurrentUser.LastLoginAt.Value.ToString("dd/MM/yyyy HH:mm")</FluentLabel>
                        }
                        <FluentLabel Typo="Typography.Body"><strong>Sesión iniciada:</strong> @AuthService.CurrentState.SessionStartTime?.ToString("dd/MM/yyyy HH:mm")</FluentLabel>
                    </FluentStack>
                </FluentCard>
                
                <FluentCard>
                    <FluentLabel Typo="Typography.H6">Permisos:</FluentLabel>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
                        @foreach (var permission in AuthService.CurrentState.CurrentPermissions.GetPermissionsDictionary())
                        {
                            <FluentLabel Typo="Typography.Body">
                                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Checkmark())" Color="Color.Success" />
                                @GetPermissionDisplayName(permission.Key): @(permission.Value ? "Permitido" : "Denegado")
                            </FluentLabel>
                        }
                    </FluentStack>
                </FluentCard>
            </FluentStack>
        }
    </FluentDialogBody>
    
    <FluentDialogFooter>
        <FluentButton Appearance="Appearance.Neutral" OnClick="CloseUserInfo">
            Cerrar
        </FluentButton>
    </FluentDialogFooter>
</FluentDialog>

@code {
    private bool IsUserInfoHidden = true;
    private bool _isUserMenuOpen = false;
    
    protected override void OnInitialized()
    {
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }
    
    private void OnAuthenticationStateChanged(AuthenticationState state)
    {
        InvokeAsync(StateHasChanged);
    }
    
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    
    private async Task HandleLogout()
    {
        _isUserMenuOpen = false;
        await AuthService.LogoutAsync();
    }
    
    private void ShowUserInfo()
    {
        IsUserInfoHidden = false;
        _isUserMenuOpen = false;
    }
    
    private void ToggleUserMenu()
    {
        _isUserMenuOpen = !_isUserMenuOpen;
    }
    
    private void CloseUserInfo()
    {
        IsUserInfoHidden = true;
    }
    
    private string GetRoleDisplayName(UserRole role)
    {
        return role switch
        {
            UserRole.Administrator => "Administrador",
            UserRole.Moderator => "Moderador",
            UserRole.Guest => "Invitado",
            _ => "Desconocido"
        };
    }
    
    private string GetUserInitials(string? username)
    {
        if (string.IsNullOrEmpty(username))
            return "?";
            
        var parts = username.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        else if (parts.Length == 1 && parts[0].Length >= 2)
            return parts[0].Substring(0, 2).ToUpper();
        else
            return parts[0][0].ToString().ToUpper();
    }
    
    private string GetPermissionDisplayName(string permission)
    {
        return permission switch
        {
            "CanEditConfig" => "Editar Configuración",
            "CanUseRcon" => "Usar RCON",
            "CanManageMods" => "Gestionar Mods",
            "CanWriteDatabase" => "Escribir en Base de Datos",
            _ => permission
        };
    }
    
    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}