@using pz_server_administrator.Services
@implements IDisposable
@inject ILocalizationService LocService
@inject NavigationManager NavigationManager

<FluentSelect TOption="KeyValuePair<string, string>"
    Items="@languageNames"
    OptionText="(item) => item.Value"
    OptionValue="(item) => item.Key"
    @bind-Value="selectedLanguage"
    @bind-Value:after="OnLanguageChangedAsync"
    Style="min-width: 120px; margin-right: 8px;" />

@code {
    private string selectedLanguage = string.Empty;
    private Dictionary<string, string> languageNames = new Dictionary<string, string>();

    protected override void OnInitialized()
    {
        LocService.OnLanguageChanged += StateHasChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        selectedLanguage = LocService.CurrentLanguage;
        languageNames.Clear();
        foreach (var lang in LocService.AvailableLanguages)
        {
            var langName = await LocService.GetLanguageNameAsync(lang);
            languageNames.Add(lang, langName);
        }
    }

    private async Task OnLanguageChangedAsync()
    {
        Console.WriteLine($"[LanguageSelector] OnLanguageChangedAsync called with: {selectedLanguage}");
        await LocService.SetLanguage(selectedLanguage);
        Console.WriteLine($"[LanguageSelector] SetLanguage completed");
        StateHasChanged();
        Console.WriteLine($"[LanguageSelector] StateHasChanged called");
    }

    public void Dispose()
    {
        LocService.OnLanguageChanged -= StateHasChanged;
    }
}